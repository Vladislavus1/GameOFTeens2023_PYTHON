from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hcode
from tgbot.services.repository import Repo
import time
from tgbot.keyboards.reply import *
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import markdown





phone_plans = {'–í—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñü§ü': {'–¶—ñ–Ω–∞': '–≤—ñ–¥ 180 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç': '–ë–µ–∑–ª—ñ–º—ñ—Ç', '–î–∑–≤—ñ–Ω–∫–∏': '1600 —Ö–≤', 'url': 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/vilniy-life-2021/'},
                '–°–º–∞—Ä—Ç –õ–∞–π—Ñ‚úåÔ∏è': {'–¶—ñ–Ω–∞': '–≤—ñ–¥ 120 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç': '25 –ì–ë', '–î–∑–≤—ñ–Ω–∫–∏': '800 —Ö–≤', 'url': 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/smart-life-2021/'},
                '–ü—Ä–æ—Å—Ç–æ –õ–∞–π—Ñüëç': {'–¶—ñ–Ω–∞': '–≤—ñ–¥ 90 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç': '8 –ì–ë', '–î–∑–≤—ñ–Ω–∫–∏': '300 —Ö–≤', 'url': 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/prosto-life-2021/'},
                'Platinum –õ–∞–π—Ñüõé': {'–¶—ñ–Ω–∞': '–≤—ñ–¥ 250 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç': '–ë–µ–∑–ª—ñ–º—ñ—Ç', '–î–∑–≤—ñ–Ω–∫–∏': '3000 —Ö–≤', 'url': 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/platinum-life-2021/'},
                '–®–∫—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñüìö': {'–¶—ñ–Ω–∞': '–≤—ñ–¥ 150 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç': '7 –ì–ë', '–î–∑–≤—ñ–Ω–∫–∏': '–ë–µ–∑–ª—ñ–º—ñ—Ç', 'url': 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/shkilniy/'},
                '“ê–∞–¥–∂–µ—Ç‚öô': {'–¶—ñ–Ω–∞': '–≤—ñ–¥ 90 –≥—Ä–Ω / 12 —Ç–∏–∂–Ω—ñ–≤', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç': '–≤—ñ–¥ 150 –ú–ë –¥–æ –±–µ–∑–ª—ñ–º—ñ—Ç—É', '–î–∑–≤—ñ–Ω–∫–∏': '–≤—ñ–¥ 15 —Ö–≤ –¥–æ 50 —Ö–≤', 'url': 'https://www.lifecell.ua/uk/mobilnij-zvyazok/gadget-series/'},
                "–°–º–∞—Ä—Ç –°—ñ–º'—èüë®‚Äçüë©‚Äçüëß‚Äçüë¶": {'–¶—ñ–Ω–∞': '–≤—ñ–¥ 375 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ', '—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç': '–≤—ñ–¥ 20 –ì–ë –¥–æ 50 –ì–ë', '–î–∑–≤—ñ–Ω–∫–∏': '–≤—ñ–¥ 500 —Ö–≤ –¥–æ 1500 —Ö–≤', 'url': 'https://www.lifecell.ua/uk/mobilnij-zvyazok/smart-simya-series/'},
               }

# async def after_reg(message: types.Message, state: FSMContext, repo: Repo):
#     answer = await repo.already_registered(username=message.from_user.username)
#     if answer == True:
#         await message.answer("–í—ñ—Ç–∞—é!")
#     elif answer == False:
#         await message.answer("–°—Ö–æ–∂–µ, —â–æ –≤–∞—Å –Ω–µ–º–∞—î —É –Ω–∞—à—ñ–π –±–∞–∑—ñ –¥–∞–Ω–Ω–∏—Ö, –ø—Ä–æ–ø–æ–Ω—É—é –≤–∞–º –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è —É –Ω—ñ–π.")
#         time.sleep(1)
#         await message.answer("–î–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–º —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç, –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó :)", reply_markup=start_phone_kb)

async def add_user(message: types.Message, state:FSMContext, repo: Repo):
    if message.from_user.id == message.contact.user_id:
        await repo.add_user(username=message.from_user.first_name, phonenumber=message.contact.phone_number, id=message.from_user.id)
        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á - {message.from_user.first_name};\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É - {message.contact.phone_number}\n")
        await message.answer('–í—ñ—Ç–∞—î–º–æ —É Lifecell!\n–ß–∏–º —è –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?', reply_markup=start_keyboard)
    elif message.from_user.id != message.contact.user_id:
        await message.answer(f"–¶–µ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä!\n–ë—É–¥—å –ª–∞—Å–∫–∞ –¥–∞–π—Ç–µ –Ω–∞–º —Å–≤—ñ–π\n—Å–ø—Ä–∞–≤–∂–Ω—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç.ü´µ")
    else:
        await message.answer("Error!")

async def menu_func(message: types.Message, state: FSMContext, repo: Repo):
    await message.answer(text='–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:', reply_markup=menu_keyboard)

async def allphoneplans(message: types.Message, state: FSMContext):
    for plan, details in phone_plans.items():
        link_keyb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ", url=details['url'])
                ]
            ]
        )
        await message.answer(f"{plan}\n\n{details['–¶—ñ–Ω–∞']}\n‚Ä¢–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {details['—ñ–Ω—Ç–µ—Ä–Ω–µ—Ç']}\n‚Ä¢–î–∑–≤—ñ–Ω–∫–∏: {details['–î–∑–≤—ñ–Ω–∫–∏']}", reply_markup=link_keyb)
        time.sleep(0.5)

async def help_command(message: types.Message, state: FSMContext):
    await message.answer("–¶–µ–π –±–æ—Ç –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –ª—é–¥–∏ –∑–º–æ–≥–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º.")
    await message.answer("–Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞:\n\n" +
                         "1. –£ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –ø—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç \"–¢–∞—Ä–∏—Ñ–∏\".\n" +
                         "2. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –æ–±–µ—Ä—ñ—Ç—å —Å–≤—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç (–ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —É—Å—ñ —Ç–∞—Ä–∏—Ñ–∏ –∞–±–æ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ –ø—ñ–¥ —Å–µ–±–µ).\n" +
                         "3. –ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–∏ –æ–±—Ä–∞–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç–∞—Ä–∏—Ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –æ–±—Ä–∞–Ω–∏–º —Ç–∞—Ä–∏—Ñ–æ–º " +
                         "—Ç–∞ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Å–∞–π—Ç Lifecell, –¥–µ –≤–∞–º –≤–∂–µ –∑–º–æ–∂—É—Ç—å –±—ñ–ª—å—à –¥–µ—Ç–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏, " +
                         "—è–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ.")
    await message.answer("–Ø–∫ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ–Ω–∏–π –ø–ª–∞–Ω –Ω–∞ Lifecell (–õ–∞–π—Ñ):\n\n" +
                         "1. –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –∑–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–º –Ω–æ–º–µ—Ä–æ–º 5433.\n" +
                         "2. –£ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –º–µ–Ω—é –≤–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç 4 - ¬´–î–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ–Ω—ñ –ø–ª–∞–Ω–∏ —ñ –≤–∞—à –±–∞–ª–∞–Ω—Å¬ª.\n" +
                         "3. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∞–º –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞—Ä–∏—Ñ—ñ–≤. –ù–∞—Ç–∏—Å–Ω—É–≤—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É, " +
                         "–≤–∏ –∑–º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Å–≤—ñ–π —Ç–∞—Ä–∏—Ñ —ñ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —ñ–Ω—à–∏–π.")

result_list = []

async def phoneplaneforme1(message: types.Message, state: FSMContext):
    await message.answer('–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ, –≤–∞–º —Å–ª—ñ–¥ –ø—Ä–æ–π—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è..')
    time.sleep(0.75)
    await message.answer('–ö—Ä–æ–∫ 1 –∑ 5:')
    await message.answer('‚Ä¢–Ø–∫–∞ —Ü—ñ–Ω–∞ —Ç–∞—Ä–∏—Ñ—É –¥–ª—è –≤–∞—Å —î –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—é?', reply_markup=phone_var_kb3)



async def phoneplaneforme2(message: types.Message, state: FSMContext):
    time.sleep(0.75)
    await message.answer('–ö—Ä–æ–∫ 2 –∑ 5:')
    await message.answer('‚Ä¢–ë–∞–∂–∞—î—Ç–µ –ª—ñ–º—ñ—Ç–Ω–∏–π —á–∏ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç?', reply_markup=phone_var_kb)
    result_list.append(message.text)

async def phoneplaneforme3(message: types.Message, state: FSMContext):
    time.sleep(0.75)
    await message.answer('–ö—Ä–æ–∫ 3 –∑ 5:')
    await message.answer('‚Ä¢–ë–∞–∂–∞—î—Ç–µ –ª—ñ–º—ñ—Ç–Ω—ñ —á–∏ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∏?', reply_markup=phone_var_kb2)
    result_list.append(message.text)

async def phoneplaneforme4(message: types.Message, state: FSMContext):
    result_list.append(message.text)
    time.sleep(0.75)
    print(result_list)
    def keyboard(link):
        link_keyb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ", url=link)
                ]
            ]
        )
        return link_keyb
    await message.answer('–ö—Ä–æ–∫ 4 –∑ 5:')
    if result_list[0] == '90 –≥—Ä–Ω' and result_list[1] == "–õ—ñ–º—ñ—Ç–Ω–∏–π":
        print(1)
        await message.answer('–ü—Ä–æ—Å—Ç–æ –õ–∞–π—Ñüëç\n\n–≤—ñ–¥ 90 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ\n‚Ä¢–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: 8 –ì–ë\n‚Ä¢–î–∑–≤—ñ–Ω–∫–∏: 300 —Ö–≤',
                             reply_markup=keyboard(
                                 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/prosto-life-2021/'))
    elif result_list[0] == '120 –≥—Ä–Ω':
        print(2)
        await message.answer('–°–º–∞—Ä—Ç –õ–∞–π—Ñ‚úåÔ∏è\n\n–≤—ñ–¥ 120 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ\n‚Ä¢–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: 25 –ì–ë\n‚Ä¢–î–∑–≤—ñ–Ω–∫–∏: 800 —Ö–≤',
                             reply_markup=keyboard(
                                 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/smart-life-2021/'))
    elif result_list[0] == '150 –≥—Ä–Ω':
        print(3)
        await message.answer('–®–∫—ñ–ª—å–Ω–∏–π –õ–∞–π—ÑüìöÔ∏è\n\n–≤—ñ–¥ 150 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ\n‚Ä¢–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: 7 –ì–ë\n‚Ä¢–î–∑–≤—ñ–Ω–∫–∏: –ë–µ–∑–ª—ñ–º—ñ—Ç',
                             reply_markup=keyboard(
                                 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/smart-life-2021/'))
    elif result_list[0] == '180 –≥—Ä–Ω':
        print(4)
        await message.answer('–í—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñü§ü\n\n–≤—ñ–¥ 180 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ\n‚Ä¢–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: –ë–µ–∑–ª—ñ–º—ñ—Ç\n‚Ä¢–î–∑–≤—ñ–Ω–∫–∏: 1600 —Ö–≤',
                             reply_markup=keyboard('https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/vilniy-life-2021/'))

    elif result_list[0] == '250 –≥—Ä–Ω':
        print(5)
        await message.answer('Platinum –õ–∞–π—Ñüõé\n\n–≤—ñ–¥ 250 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ\n‚Ä¢–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: –ë–µ–∑–ª—ñ–º—ñ—Ç\n‚Ä¢–î–∑–≤—ñ–Ω–∫–∏: 3000 —Ö–≤',
                             reply_markup=keyboard(
                                 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/platinum-life-2021/'))
    elif result_list[0] == '375 –≥—Ä–Ω':
        print(6)
        await message.answer('Platinum –õ–∞–π—Ñüõé\n\n–≤—ñ–¥ 250 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ\n‚Ä¢–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: –ë–µ–∑–ª—ñ–º—ñ—Ç\n‚Ä¢–î–∑–≤—ñ–Ω–∫–∏: 3000 —Ö–≤',
                             reply_markup=keyboard(
                                 'https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/platinum-life-2021/'))
    elif result_list[0] == '90 –≥—Ä–Ω' and result_list[1] == "–ë–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π":
        print(7)
        await message.answer('“ê–∞–¥–∂–µ—Ç‚öôÔ∏è\n\n–≤—ñ–¥ 90 –≥—Ä–Ω / 4 —Ç–∏–∂–Ω—ñ\n‚Ä¢–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: –≤—ñ–¥ 150 –ú–ë –¥–æ –±–µ–∑–ª—ñ–º—ñ—Ç—É\n‚Ä¢–î–∑–≤—ñ–Ω–∫–∏: –≤—ñ–¥ 15 —Ö–≤ –¥–æ 50 —Ö–≤',
                             reply_markup=keyboard(
                                 'https://www.lifecell.ua/uk/mobilnij-zvyazok/gadget-series/'))
    else:
        print('error')
    time.sleep(0.75)
    result_list.clear()
    await message.answer('–ö—Ä–æ–∫ 5 –∑ 5:')
    await message.answer('–ß–∏ –ø—ñ–¥—ñ–π—à–æ–≤ –≤–∞–º —Ç–∞—Ä–∏—Ñ?', reply_markup=rate_kb)

async def phone_answer(message: types.Message, state: FSMContext):
    time.sleep(0.5)
    await message.answer('–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫!')
    await message.answer('–ß–∏–º —è —â–µ –º–æ–∂—É –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?', reply_markup=start_keyboard)

def register_echo(dp: Dispatcher):
    dp.register_message_handler(phone_answer, text="–ù—ñ :(")
    dp.register_message_handler(phone_answer, text="–¢–∞–∫ :D")
    dp.register_message_handler(phoneplaneforme4, text="–ë–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ")
    dp.register_message_handler(phoneplaneforme4, text="–õ—ñ–º—ñ—Ç–Ω—ñ")
    dp.register_message_handler(phoneplaneforme3, text="–ë–µ–∑–ª—ñ–º—ñ—Ç–Ω–∏–π")
    dp.register_message_handler(phoneplaneforme3, text="–õ—ñ–º—ñ—Ç–Ω–∏–π")
    dp.register_message_handler(phoneplaneforme2, text='375 –≥—Ä–Ω')
    dp.register_message_handler(phoneplaneforme2, text='250 –≥—Ä–Ω')
    dp.register_message_handler(phoneplaneforme2, text='180 –≥—Ä–Ω')
    dp.register_message_handler(phoneplaneforme2, text='150 –≥—Ä–Ω')
    dp.register_message_handler(phoneplaneforme2, text='120 –≥—Ä–Ω')
    dp.register_message_handler(phoneplaneforme2, text='90 –≥—Ä–Ω')
    dp.register_message_handler(phoneplaneforme1, text='–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ –ø—ñ–¥ —Å–µ–±–µ')
    dp.register_message_handler(help_command, commands=["help"])
    dp.register_message_handler(allphoneplans, text='–£—Å—ñ —Ç–∞—Ä–∏—Ñ–∏')
    dp.register_message_handler(menu_func, text='–¢–∞—Ä–∏—Ñ–∏')
    dp.register_message_handler(add_user, state="*", content_types=types.ContentTypes.CONTACT)

